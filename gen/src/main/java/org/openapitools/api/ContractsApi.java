/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.0.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.ContractActionRequest;
import org.openapitools.model.ContractRequest;
import org.openapitools.model.ContractResponse;
import org.openapitools.model.ContractsResponse;
import org.openapitools.model.ErrorResponse;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-07-24T16:40:58.350645200+02:00[Europe/Paris]")
@Validated
@Api(value = "contracts", description = "the contracts API")
public interface ContractsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /contracts/{contractRef} : Read a Contract
     * Get an existing Contract
     *
     * @param contractRef External identifier of the contract (required)
     * @return OK (status code 200)
     *         or ERROR - Not authenticated (status code 401)
     *         or ERROR - Access token does not have the required scope (status code 403)
     *         or ERROR - Internal Server error (status code 500)
     */
    @ApiOperation(value = "Read a Contract", nickname = "getContract", notes = "Get an existing Contract", response = ContractResponse.class, authorizations = {
        
        @Authorization(value = "ApiKey"),
        @Authorization(value = "OAuth2", scopes = {
            @AuthorizationScope(scope = "write", description = "Grants write access") })
         }, tags={ "Search/Read", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ContractResponse.class),
        @ApiResponse(code = 401, message = "ERROR - Not authenticated", response = ErrorResponse.class),
        @ApiResponse(code = 403, message = "ERROR - Access token does not have the required scope", response = ErrorResponse.class),
        @ApiResponse(code = 500, message = "ERROR - Internal Server error", response = ErrorResponse.class) })
    @GetMapping(
        value = "/contracts/{contractRef}",
        produces = { "application/json" }
    )
    default ResponseEntity<ContractResponse> getContract(@ApiParam(value = "External identifier of the contract",required=true) @PathVariable("contractRef") String contractRef) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"ContractRequest\" : { \"$ref\" : \"#/components/examples/ContractRequest\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /contracts/{contractRef} : Patch a Contract
     * Update an existing Contract
     *
     * @param contractRef External identifier of the contract (required)
     * @param contractActionRequest  (optional)
     * @return NO_CONTENT (status code 204)
     *         or ERROR - Invalid object request (status code 400)
     *         or ERROR - Not authenticated (status code 401)
     *         or ERROR - Access token does not have the required scope (status code 403)
     *         or ERROR - Internal Server error (status code 500)
     */
    @ApiOperation(value = "Patch a Contract", nickname = "patchContract", notes = "Update an existing Contract", authorizations = {
        
        @Authorization(value = "ApiKey"),
        @Authorization(value = "OAuth2", scopes = {
            @AuthorizationScope(scope = "write", description = "Grants write access") })
         }, tags={ "Create/Lifecycle", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "NO_CONTENT"),
        @ApiResponse(code = 400, message = "ERROR - Invalid object request", response = ErrorResponse.class),
        @ApiResponse(code = 401, message = "ERROR - Not authenticated", response = ErrorResponse.class),
        @ApiResponse(code = 403, message = "ERROR - Access token does not have the required scope", response = ErrorResponse.class),
        @ApiResponse(code = 500, message = "ERROR - Internal Server error", response = ErrorResponse.class) })
    @PatchMapping(
        value = "/contracts/{contractRef}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> patchContract(@ApiParam(value = "External identifier of the contract",required=true) @PathVariable("contractRef") String contractRef,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) ContractActionRequest contractActionRequest) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /contracts : Add a Contract
     * Add a new Contract
     *
     * @param contractRequest  (optional)
     * @return SUCCESS - Contract created (status code 201)
     *         or ERROR - Invalid object request (status code 400)
     *         or ERROR - Not authenticated (status code 401)
     *         or ERROR - Access token does not have the required scope (status code 403)
     *         or ERROR - Internal Server error (status code 500)
     */
    @ApiOperation(value = "Add a Contract", nickname = "postContract", notes = "Add a new Contract", response = ContractResponse.class, authorizations = {
        
        @Authorization(value = "ApiKey"),
        @Authorization(value = "OAuth2", scopes = {
            @AuthorizationScope(scope = "write", description = "Grants write access") })
         }, tags={ "Create/Lifecycle", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "SUCCESS - Contract created", response = ContractResponse.class),
        @ApiResponse(code = 400, message = "ERROR - Invalid object request", response = ErrorResponse.class),
        @ApiResponse(code = 401, message = "ERROR - Not authenticated", response = ErrorResponse.class),
        @ApiResponse(code = 403, message = "ERROR - Access token does not have the required scope", response = ErrorResponse.class),
        @ApiResponse(code = 500, message = "ERROR - Internal Server error", response = ErrorResponse.class) })
    @PostMapping(
        value = "/contracts",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<ContractResponse> postContract(@ApiParam(value = ""  )  @Valid @RequestBody(required = false) ContractRequest contractRequest) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"ContractRequest\" : { \"$ref\" : \"#/components/examples/ContractRequest\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /contracts : Search Contracts
     * Multi-criteria search for contracts. The result is a list (maybe empty) of contracts
     *
     * @param subscriberRef External identifier of the subscriber (optional)
     * @param contractStatus Contract Status (optional)
     * @param limit Limits the number of items on a page (optional)
     * @param offset Specifies the page number of the list to be displayed (optional)
     * @return SUCCESS - Returns a list of Contracts (status code 200)
     *         or ERROR - Not authenticated (status code 401)
     *         or ERROR - Access token does not have the required scope (status code 403)
     *         or ERROR - Internal Server error (status code 500)
     */
    @ApiOperation(value = "Search Contracts", nickname = "searchContracts", notes = "Multi-criteria search for contracts. The result is a list (maybe empty) of contracts", response = ContractsResponse.class, authorizations = {
        
        @Authorization(value = "ApiKey"),
        @Authorization(value = "OAuth2", scopes = {
            @AuthorizationScope(scope = "read", description = "Grants read access") })
         }, tags={ "Search/Read", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "SUCCESS - Returns a list of Contracts", response = ContractsResponse.class),
        @ApiResponse(code = 401, message = "ERROR - Not authenticated", response = ErrorResponse.class),
        @ApiResponse(code = 403, message = "ERROR - Access token does not have the required scope", response = ErrorResponse.class),
        @ApiResponse(code = 500, message = "ERROR - Internal Server error", response = ErrorResponse.class) })
    @GetMapping(
        value = "/contracts",
        produces = { "application/json" }
    )
    default ResponseEntity<ContractsResponse> searchContracts(@ApiParam(value = "External identifier of the subscriber") @Valid @RequestParam(value = "subscriberRef", required = false) String subscriberRef,@ApiParam(value = "Contract Status") @Valid @RequestParam(value = "contractStatus", required = false) String contractStatus,@ApiParam(value = "Limits the number of items on a page") @Valid @RequestParam(value = "limit", required = false) Integer limit,@ApiParam(value = "Specifies the page number of the list to be displayed") @Valid @RequestParam(value = "offset", required = false) Integer offset) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"ContractsResponse\" : { \"$ref\" : \"#/components/examples/ContractsResponse\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
