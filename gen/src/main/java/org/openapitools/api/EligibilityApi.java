/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.0.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.EligibilityResponse;
import org.openapitools.model.ErrorResponse;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-07-24T16:21:13.194359300+02:00[Europe/Paris]")
@Validated
@Api(value = "eligibility", description = "the eligibility API")
public interface EligibilityApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /eligibility/{customerRef} : Rerieves Eligibility status
     * Gives the status of customers with respect to the subscription. Ccontract and payment information are checked.
     *
     * @param customerRef External reference of the buyer (required)
     * @return SUCCESS - Returns list of status (status code 200)
     *         or ERROR - Not authenticated (status code 401)
     *         or ERROR - Access token does not have the required scope (status code 403)
     *         or ERROR - Internal Server error (status code 500)
     */
    @ApiOperation(value = "Rerieves Eligibility status", nickname = "readEligibility", notes = "Gives the status of customers with respect to the subscription. Ccontract and payment information are checked.", response = EligibilityResponse.class, authorizations = {
        
        @Authorization(value = "ApiKey"),
        @Authorization(value = "OAuth2", scopes = {
            @AuthorizationScope(scope = "read", description = "Grants read access") })
         }, tags={ "PHASE 1","Eligibility", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "SUCCESS - Returns list of status", response = EligibilityResponse.class),
        @ApiResponse(code = 401, message = "ERROR - Not authenticated", response = ErrorResponse.class),
        @ApiResponse(code = 403, message = "ERROR - Access token does not have the required scope", response = ErrorResponse.class),
        @ApiResponse(code = 500, message = "ERROR - Internal Server error", response = ErrorResponse.class) })
    @GetMapping(
        value = "/eligibility/{customerRef}",
        produces = { "application/json" }
    )
    default ResponseEntity<EligibilityResponse> readEligibility(@ApiParam(value = "External reference of the buyer",required=true) @PathVariable("customerRef") String customerRef) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"$ref\" : \"#/components/examples/EligibilityResponse\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
